AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: AWS Lambda function that processes CloudWatch Logs containing OTLP stdout spans
  and forwards them to OpenTelemetry collectors

Parameters:
  RouteAllLogs:
    Type: String
    Default: yes
    Description: Route all AWS logs to the Lambda function
  VpcId:
    Type: String
    Description: (Optional) VPC ID for VPC deployment
    Default: ""
  SubnetIds:
    Type: CommaDelimitedList
    Description: (Optional) List of subnet IDs for VPC deployment
    Default: ""

Conditions:
  RouteAllLogs: !Equals [!Ref RouteAllLogs, "yes"]
  HasVpcConfig: !Not [!Equals [!Ref VpcId, ""]]

Resources:
  ProcessorFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: logs_processor
    Properties:
      FunctionName: !Ref AWS::StackName
      Description: !Sub "Processes Cloudwatch logs from AWS Account ${AWS::AccountId}"
      CodeUri: processor/
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Timeout: 60
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO
      Environment:
        Variables:
          LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: async
          LAMBDA_TRACING_ENABLE_FMT_LAYER: false
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4318
          OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
          OPENTELEMETRY_EXTENSION_LOG_LEVEL: DEBUG
          OPENTELEMETRY_COLLECTOR_CONFIG_URI: /opt/collector.yaml
          FORWARDER_OTLPHTTP_HEADERS_SECRET: serverless-otlp-forwarder/keys/newrelic
          FORWARDER_OTLPHTTP_ENDPOINT: https://otlp.nr-data.net
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "secretsmanager:BatchGetSecretValue"
                - "secretsmanager:ListSecrets"
                - "xray:PutTraceSegments"
                - "xray:PutSpans"
                - "xray:PutSpansForIndexing"
              Resource: "*"
            - Effect: Allow
              Action:
                - "secretsmanager:GetSecretValue"
              Resource: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
      Layers:
        - !Ref CollectorConfig
        - arn:aws:lambda:us-east-1:961341555982:layer:ocel-arm64-spaneventtolog-0_123_0-local:6
      VpcConfig: !If
        - HasVpcConfig
        - SecurityGroupIds:
            - !Ref SecurityGroup
          SubnetIds: !Ref SubnetIds
        - !Ref AWS::NoValue

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasVpcConfig
    Properties:
      GroupDescription: Security group for Cloudwatch Logs Processor Lambda
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessorFunction
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  LogsAccountPolicy:
    Type: AWS::Logs::AccountPolicy
    Condition: RouteAllLogs
    DependsOn:
      - ProcessorPermission
    Properties:
      PolicyName: "LambdaSubscriptionPolicy"
      PolicyDocument:
        Fn::Sub: |
          {
            "DestinationArn": "${ProcessorFunction.Arn}",
            "FilterPattern": "{ $.__otel_otlp_stdout = * }"
          }
      PolicyType: "SUBSCRIPTION_FILTER_POLICY"
      Scope: "ALL"
      SelectionCriteria: !Sub 'LogGroupName NOT IN ["/aws/${ProcessorFunction}"]'

  CollectorConfig:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-collector-config"
      Description: "Layer for the collector configuration"
      ContentUri: config/
    Metadata:
      BuildMethod: makefile

    
Outputs:
  ProcessorFunctionArn:
    Description: ARN of the Cloudwatch Logs processor Lambda function
    Value: !GetAtt ProcessorFunction.Arn

  SecurityGroupId:
    Description: ID of the security group for the Span processor Lambda function
    Condition: HasVpcConfig
    Value: !Ref SecurityGroup